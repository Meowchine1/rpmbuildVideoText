Источники
Maximum RPM — http://ftp.rpm.org/max-rpm/index.html https://ftp.osuosl.org/pub/rpm/max-rpm/s1-rpm-build-starting-build.html
ALT Linux — http://heap.altlinux.org/issues/textbooks/linux_intro/Package.html
Георгий Курячий http://www.uneex.ru/LecturesCMC/PackageMaintaining2009 http://www.uneex.ru/static/AltDocs_linux_intro/Package.html
======================================================

(Ожидается\ ) (серия\ряд) видео, посвященных утилитам сборки RPM пакетов в ОС Альт. В этом видео будет рассмотрена утилита rpmbuild.

Пользовательская система состоит из большого числа программ и утилит. В Linux каждый компонент системы представлен в виде пакета. Все операции, связанные с изменением состава системы: установка, удаление, проверка, обновление компонентов — производятся над пакетами. 

Пакет — это обертка совокупности файлов. Представление программы в виде пакета - это способ абстрагироваться от множества файлов, необходимых для работы программы. Такой подход позволяет работать с множеством программ и утилит обеспечивающих работу целевого приложения, как с единственной сущностью. Нет жёсткого требования, чтобы один пакет содержал только одну программу. В пакет естественно объединять такие ресурсы, с которыми удобно работать как с одним целым. Это может быть отдельная программа или набор утилит. 

Для управления пакетами в ALT Linux используется пакетный менеджер RPM. Применение пакетного менеджера требует оформления пакетов в одноименном  формате — rpm. Как раз rpmbuild предназначена для создания файлов в формате rpm, вернемся к этому немного позже.

Подготовка
1. Первой задачей пакетирования является объединение исходных файлов в один файл-архив:
 $ tar -cf methody.progs.tar bin/
 $ tar -tf methody.progs.tar
2. Для каждого пакета RPM требует описание файла специального формата – spec-файла. В файле данного типа описываются программные зависимости файлов,  а также их способ сборки и установки. 
Исходные файлы и алгоритм сборки в виде spec-файла – это все, что требуется пакетному менеджеру RPM. Всю эту информацию RPM хранит в специальной базе данных. Таким образом нет сложностей для поиска и удаления пакета.

Настройка сборочного окружения для сборки при помощи утилита rpmbuild
Пусть есть входные данные:
    - tar-архив исходных файлов
    - spec-файл

1. Утилита сборки
Сборка RPM-пакета выполняется при помощи утилиты rpmbuild. Для этого установим пакет rpm-build из репозитория.
```
apt-get install rpm-build
```
2. Дерево каталогов для сборки пакета
Перед использованием утилиты необходимо сконфигурировать окружение сборки. Для этого создадим дерево каталогов. Для этого воспользуемся скриптом rpmdev-setuptree из пакета rpmdevtools:
```
apt-get install rpmdevtools
rpmdev-setuptree
tree %homedir/RPM

 %homedir/RPM/
 |-- BUILD
 |-- RPMS
 |-- SOURCES
 |-- SPECS
 `-- SRPMS
```
В конфигурационном файле утилиты rpm-build .rpmmacros, по умолчанию, установлена директория %homedir/RPM., в которой должно находится дерево каталогов.

BUILD — директория сборочных каталогов.
SOURCES — каталог, в который пользователю необходимо поместить архивы исходного кода, патчи и другие файлы, необходимые для сборки.
SPECS — каталог файлов спецификации.
RPMS -- каталог, состоящий из подкаталогов для разных архитектур. Собранные двоичные RPM-пакеты записываются в подкаталог, соответствующий сборочной архитектуре.
В каталог  SRPMS  сохраняются SRPM-пакеты. SRPM-пакеты состоят из исходного кода и spec-файла. 

Во время запуска сборки пакета будет создан ещё один специальный каталог сборки. По умолчанию этот каталог будет расположен в директории %homedir/tmp, согласно настройкам из .rpmmacrps. Каталог состоит из подкаталогов сборки BUILDROOT. BUILDROOT-подкаталог, выполняет роль корневого каталога (chroot), внутри которого формируется иерархия файловой системы в соответствии со стандартом иерархии файловой системы системы конечного пользователя (FHS). Иерархия каталогов в buildroot состоит только из тех каталогов в которых располагаются файлы собираемого ПО.
Особенность утилиты rpmbuild – установка зависимостей.
Команда rpmbuild не устанавливает зависимости из spec-файла автоматически. Она ищет требуемые зависимости среди установленные в системе программ.
Поэтому перед сборкой пакета с помощью rpmbuild необходимо убедиться, что все необходимые зависимости уже установлены в системе.
3. Сборка пакета
Перед началом сборки подготовим каталоги сборки:
а) очистка содержимого каталогов SPECS и SOURCES
б) поместить архив исходного кода в SOURCE;
в) поместить spec-файл в SPECS
Сборка пакета, в зависимости от потребностей, осуществляется при помощи следующих команд:
   	 rpmbuild -bb <SPECFILE>  -- создание пакета типа RPM
   	 rpmbuild -bs <SPECFILE>  -- создание пакета типа SRPM
   	 rpmbuild -ba <SPECFILE>  -- создание пакетов двух типов

Для установки RPM-пакета
```
 rpm -i <ИМЯ>.rpm
```

Для установки SRPM пакета нужно из SRPM-пакета создать rpm
```
rpmbuild --rebuild <package.src.rpm>
```
Теперь пакет можно установить
```
 rpm -i <ИМЯ>.rpm
```
В случае успешной сборки, rpm-пакет будет расположен в директории RPMS.

Готовый пакет можно устанавливать на устройства с идентичной  архитектурой процессора и операционной системой. Готовый пакет можно (и нужно) также загрузить в репозиторий Sisyphus.
В данном видеоролике был описан алгоритм сборки программы в rpm-пакет при помощи утилиты rpmbuild.



